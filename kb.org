* Percona Toolkit
** Updating modules
Percona Toolkit includes all modules in the resulting script for each
tool, so if you make changes to the code for a module, the tools using
it must be regenerated.

The following example updates pt-stalk after making changes to the
collect module:

#+BEGIN_SRC sh
cd /path/to/percona-toolkit/repo/
util/update-modules bin/pt-stalk collect
#+END_SRC

Source: Conversation with [[https://github.com/frank-cizmich][Frank Cizmich]]

** Testing
In order to run the tests for a tool before submitting a patch/pull
request, the following must be done:

1- Set up the required environment variables

#+BEGIN_SRC sh
export PERCONA_TOOLKIT_BRANCH=/path/to/branch/to/test
export PERCONA_TOOLKIT_SANDBOX=/path/to/mysql/bin/dist
#+END_SRC

The second variable must point to a binary directory for MySQL, such
as the ones used by [[http://mysqlsandbox.net][MySQL Sandbox]].

2- Start the sandbox

This is done by running:

#+BEGIN_SRC sh
cd $PERCONA_TOOLKIT_BRANCH/sandbox
./test-env start
#+END_SRC

3- Run the test (or tests)

An example to test changes to pt-stalk:

#+BEGIN_SRC sh
cd $PERCONA_TOOLKIT_BRANCH/t/pt-stalk
prove -v .
#+END_SRC

Source: Conversation with [[https://github.com/frank-cizmich][Frank Cizmich]]
* MySQL
** 8.0
*** Innodb Memory usage
#+BEGIN_EXAMPLE
select * from sys.memory_global_by_current_bytes where event_name LIKE 'memory/innodb/%';
+-------------------------------------------+---------------+---------------+-------------------+------------+------------+----------------+
| event_name                                | current_count | current_alloc | current_avg_alloc | high_count | high_alloc | high_avg_alloc |
+-------------------------------------------+---------------+---------------+-------------------+------------+------------+----------------+
| memory/innodb/buf_buf_pool                |             4 | 524.25 MiB    | 131.06 MiB        |          4 | 524.25 MiB | 131.06 MiB     |
| memory/innodb/log0log                     |             9 | 32.01 MiB     | 3.56 MiB          |          9 | 32.01 MiB  | 3.56 MiB       |
| memory/innodb/hash0hash                   |            41 | 16.30 MiB     | 406.98 KiB        |         45 | 16.30 MiB  | 370.80 KiB     |
| memory/innodb/os0event                    |         99139 | 12.86 MiB     | 136 bytes         |      99139 | 12.86 MiB  | 136 bytes      |
| memory/innodb/ut0pool                     |             2 | 4.00 MiB      | 2.00 MiB          |          2 | 4.00 MiB   | 2.00 MiB       |
| memory/innodb/os0file                     |           140 | 2.60 MiB      | 19.05 KiB         |        141 | 3.62 MiB   | 26.29 KiB      |
| memory/innodb/buf0dblwr                   |             4 | 2.02 MiB      | 516.34 KiB        |          5 | 2.05 MiB   | 419.48 KiB     |
| memory/innodb/memory                      |           941 | 1.65 MiB      | 1.80 KiB          |        969 | 1.85 MiB   | 1.96 KiB       |
| memory/innodb/sync0arr                    |             3 | 1.20 MiB      | 409.57 KiB        |          3 | 1.20 MiB   | 409.57 KiB     |
| memory/innodb/lock0lock                   |            33 | 1.10 MiB      | 34.12 KiB         |         33 | 1.10 MiB   | 34.12 KiB      |
| memory/innodb/read0read                   |          1066 | 163.48 KiB    | 157 bytes         |       1066 | 163.48 KiB | 157 bytes      |
| memory/innodb/fsp0file                    |             1 | 128.02 KiB    | 128.02 KiB        |          2 | 128.09 KiB | 64.04 KiB      |
| memory/innodb/row0sel                     |             5 | 55.84 KiB     | 11.17 KiB         |          5 | 55.84 KiB  | 11.17 KiB      |
| memory/innodb/ha_innodb                   |            66 | 52.22 KiB     | 810 bytes         |         68 | 52.38 KiB  | 789 bytes      |
| memory/innodb/trx0undo                    |           121 | 40.65 KiB     | 344 bytes         |        121 | 40.65 KiB  | 344 bytes      |
| memory/innodb/trx0rseg                    |           128 | 37.00 KiB     | 296 bytes         |        128 | 37.00 KiB  | 296 bytes      |
| memory/innodb/fil0fil                     |           127 | 36.75 KiB     | 296 bytes         |        191 | 228.89 KiB | 1.20 KiB       |
| memory/innodb/std                         |           369 | 29.88 KiB     | 83 bytes          |        388 | 32.55 KiB  | 86 bytes       |
| memory/innodb/ut_lock_free_hash_t         |             4 | 16.20 KiB     | 4.05 KiB          |          4 | 16.20 KiB  | 4.05 KiB       |
| memory/innodb/lexyy                       |             3 | 16.15 KiB     | 5.38 KiB          |          3 | 16.15 KiB  | 5.38 KiB       |
| memory/innodb/sync0debug                  |            88 | 11.56 KiB     | 134 bytes         |         88 | 11.56 KiB  | 134 bytes      |
| memory/innodb/dict0dict                   |            81 | 9.77 KiB      | 123 bytes         |         81 | 9.78 KiB   | 124 bytes      |
| memory/innodb/mem0mem                     |           186 | 8.11 KiB      | 45 bytes          |        186 | 8.11 KiB   | 45 bytes       |
| memory/innodb/trx0trx                     |            33 | 7.24 KiB      | 225 bytes         |         33 | 7.24 KiB   | 225 bytes      |
| memory/innodb/trx0sys                     |             3 | 2.65 KiB      | 904 bytes         |          3 | 2.65 KiB   | 904 bytes      |
| memory/innodb/buf0buf                     |             4 | 2.36 KiB      | 604 bytes         |          5 | 2.43 KiB   | 498 bytes      |
| memory/innodb/rem0rec                     |            24 | 1.92 KiB      | 82 bytes          |         27 | 2.18 KiB   | 83 bytes       |
| memory/innodb/adaptive hash index         |            11 | 1.39 KiB      | 129 bytes         |         11 | 1.39 KiB   | 129 bytes      |
| memory/innodb/dict_stats_bg_recalc_pool_t |             2 | 1.08 KiB      | 552 bytes         |          2 | 1.08 KiB   | 552 bytes      |
| memory/innodb/trx0purge                   |             2 | 664 bytes     | 332 bytes         |          2 | 664 bytes  | 332 bytes      |
| memory/innodb/srv0srv                     |             1 | 632 bytes     | 632 bytes         |          1 | 632 bytes  | 632 bytes      |
| memory/innodb/btr0pcur                    |             4 | 618 bytes     | 154 bytes         |          4 | 618 bytes  | 154 bytes      |
| memory/innodb/log0recv                    |             1 | 328 bytes     | 328 bytes         |          4 | 2.00 MiB   | 512.36 KiB     |
| memory/innodb/buf0flu                     |             2 | 280 bytes     | 140 bytes         |          2 | 280 bytes  | 140 bytes      |
| memory/innodb/trx0i_s                     |             1 | 152 bytes     | 152 bytes         |          1 | 152 bytes  | 152 bytes      |
| memory/innodb/ha0ha                       |             1 | 152 bytes     | 152 bytes         |          1 | 152 bytes  | 152 bytes      |
| memory/innodb/buf_stat_per_index_t        |             2 | 144 bytes     | 72 bytes          |          2 | 144 bytes  | 72 bytes       |
| memory/innodb/ibuf0ibuf                   |             1 | 136 bytes     | 136 bytes         |          1 | 136 bytes  | 136 bytes      |
| memory/innodb/ut0wqueue                   |             1 | 96 bytes      | 96 bytes          |          1 | 96 bytes   | 96 bytes       |
| memory/innodb/sync0types                  |             2 | 80 bytes      | 40 bytes          |          2 | 80 bytes   | 40 bytes       |
| memory/innodb/usr0sess                    |             2 | 80 bytes      | 40 bytes          |          2 | 80 bytes   | 40 bytes       |
| memory/innodb/dict0boot                   |             1 | 64 bytes      | 64 bytes          |          1 | 64 bytes   | 64 bytes       |
| memory/innodb/pars0lex                    |             1 | 56 bytes      | 56 bytes          |          1 | 56 bytes   | 56 bytes       |
| memory/innodb/ut0list                     |             1 | 40 bytes      | 40 bytes          |          1 | 40 bytes   | 40 bytes       |
| memory/innodb/trx_sys_t::rw_trx_ids       |             1 | 32 bytes      | 32 bytes          |          1 | 32 bytes   | 32 bytes       |
+-------------------------------------------+---------------+---------------+-------------------+------------+------------+----------------+
45 rows in set (0.06 sec)
#+END_EXAMPLE
Source: [[https://github.com/morgo][Morgan Tocker]]
** Docker
*** If you need to mount from /root/ or some other dir that does not have the necessary SELinux label

The :Z option to -v takes care of the relabeling, so you don't need to disable SELinux. However, I prefer to not mount from /root/ if possible.

    docker run -p 3306:3306 -v /root/mysqlcnfs/mysql1/mysql/conf.d:/etc/mysql/conf.d:Z --name=mysql1 -e MYSQL_ROOT_PASSWORD=password -d mysql/mysql-server:5.7.22

References:
- https://www.projectatomic.io/blog/2015/06/using-volumes-with-docker-can-cause-problems-with-selinux/
- https://dev.mysql.com/doc/refman/5.7/en/docker-mysql-more-topics.html#docker-persisting-data-configuration

* Linux
** emergency ssh access
https://smallstep.com/blog/ssh-emergency-access/
** perf not being able to resolve kernel symbols
https://unix.stackexchange.com/questions/276179/missing-stack-symbols-with-perf-events-perf-report-despite-fno-omit-frame-poi/542221#542221
* Prometheus
** Using the delta function
The [[http://prometheus.io/docs/querying/functions/#delta][delta]] function lets you graph monotonically incrementing counters as the difference in their value over a period of time.
This example graphs the mongodb_op_counters_total variable's changes every 5 seconds:

#+BEGIN_SRC js
delta(mongodb_op_counters_total[5s])
#+END_SRC
** Reloading the configuration

The configuration file can be reloaded live by sending SIGHUP to the process:

#+BEGIN_SRC sh
kill -SIGHUP $(pidof prometheus)
#+END_SRC

If the configuration has an error, it won't be applied, and the error message will be printed to stdout (or the appropriate log file if set)
Source: http://prometheus.io/docs/operating/configuration/
* Sysbench
** Adding functions that can be invoked from lua scripts
- Add a function to an existing test, or to a new test
i.e., on sysbench/db_driver.h:
#+BEGIN_SRC c
void mytest_print_message(char *message);
#+END_SRC
sysbench/db_driver.c:
#+BEGIN_SRC c
void mytest_print_message(char *message)
{
  printf(message);
}
#+END_SRC
- Add the corresponding parts to sysbench/scripting/script_lua.c
i.e.:
#+BEGIN_SRC c
static int sb_lua_mytest_print_message(lua_State *L);

int sb_lua_mytest_print_message(lua_State *L)
{
  sb_lua_ctxt_t *ctxt;

  ctxt = sb_lua_get_context(L);
  mytest_print_message(luaL_checkstring(L,1));
}

lua_pushcfunction(state, sb_lua_mytest_print_message);
lua_setglobal(state, "mytest_print_message");
#+END_SRC
- Now we can use mytest_print_message from a lua script:
#+BEGIN_SRC lua
function prepare()
         mytest_print_message("This is a test message","Another one")
end
#+END_SRC
* Sage
** Useful uncertainties-type functions for RIF
#+begin_src sage
uncertain = lambda value, error : RIF(value-error, value+error)
value_error = lambda r : (r.center(), r.absolute_diameter()/2)
#+end_src
Source:https://ask.sagemath.org/question/10660/propagation-of-uncertainty/
** Installing packages
https://ask.sagemath.org/question/8927/how-do-i-install-python-modules-or-use-a-different-version-of-python-with-sage/
This worked for me:
#+BEGIN_SRC sh
tar xzf uncertainties-3.1.2.tar.gz && rm uncertainties-3.1.2.tar.gz && cd uncertainties-3.1.2
sage --python setup.py install
#+END_SRC

* R
** large-ish data sets

This imports a csv file into MySQL, then loads it from R to generate a
scatter plot with a large number of observations (8M in my case).

I had to use RMySQL because, a direct load via read.csv() would fail
running out of memory, which is clearly a problem with the read.table
family of functions, as this is a 2GB file being processed on a 16GB
RAM box.

Here is a snippet of the input file:
#+BEGIN_EXAMPLE
00:28:28,0.0000958180
00:28:28,0.0000031920
00:28:28,0.0000039620
00:28:28,0.0000031800
00:28:28,0.0000021810
#+END_EXAMPLE

Which is loaded into MySQL like so:

#+BEGIN_SRC sql
CREATE TABLE `mrt` (
  `ts` time DEFAULT NULL,
  `rt` mediumtext
); -- Yes, no indexes
load data infile '/tmp/mrt.csv' into table mrt fields terminated by ',';
#+END_SRC

And then processed from R like so:

#+BEGIN_SRC r
library(RMySQL)
con <- dbConnect(MySQL(), user="root", password="", dbname="r", host="localhost")
mrt <- dbGetQuery(con, "select ts, rt from r.mrt")

ggplot(mrt, aes(x=mrt$ts, y=as.numeric(mrt$rt))) + geom_point()+ xlab("time") + ylab("response time") + ggtitle("MongoDB response time") + scale_x_discrete(breaks=function(x) {
min = as.integer(gsub(":","",bounds[1]))
max = as.integer(gsub(":","",bounds[2]))
return (c(as.character(min),as.character((min+max)/2),as.character(max)))
})

#+END_SRC

sources:
- http://www.r-bloggers.com/mysql-and-r/
- https://cran.r-project.org/package=RMySQL
* Mac
** Unquarantine Applications
#+BEGIN_SRC sh
xattr -rd com.apple.quarantine <path/to/app>
#+END_SRC

Source: https://ask.sagemath.org/question/49572/sage-90-installation-issues-on-macos-10152-catalina/

** Fix hostname in terminal in Sequoia
Source:https://discussions.apple.com/thread/255761651?sortBy=rank
Note these are 3 different settings but I'm setting them to the same because that's how I use my machines.
#+begin_src sh :results output raw
hostname=moog
for setting in HostName LocalHostName ComputerName; do
    sudo scutil --set $setting $hostname
done
#+end_src


** Using autocd on mac
The problem is the bash version.
https://apple.stackexchange.com/questions/55412/cd-to-a-directory-by-typing-its-name
** Show dot files in Finder
In case you need to restore a dot file from a TimeMachine backup.

#+BEGIN_SRC sh
defaults write com.apple.finder AppleShowAllFiles TRUE
killall Finder
#+END_SRC

source: http://apple.stackexchange.com/questions/141321/how-to-restore-a-hidden-file-in-time-machine
** Disable built in keyboard
(my use case: to use the happy hacking keyboard on top of the built in
one when I am on the go)

For the record, what I wound up doing was cutting and pasting the following into the terminal (with my admin password):
sudo kextunload /System/Library/Extensions/AppleUSBTopCase.kext/Contents/PlugIns/AppleUSBTCKeyboard.kext/

To turn it back on, I did this:
sudo kextload /System/Library/Extensions/AppleUSBTopCase.kext/Contents/PlugIns/AppleUSBTCKeyboard.kext/

Reference: https://discussions.apple.com/message/26556362#26556362

* emacs
** recompile installed packages
I have found that this is not only needed between major version upgrades, but sometimes also after SIGKILLing emacs (or similar hard crash).
http://stackoverflow.com/questions/24725778/how-to-rebuild-elpa-packages-after-upgrade-of-emacs
** listing processes
To see what's running on emacs, eval list-processes
Source and related functions: https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html
** Get major mode for current buffer
M-: major-mode RET (for the current buffer)
C-h v major-mode RET (same but also describes the mode)

Source: https://emacs.stackexchange.com/questions/18082/how-do-i-get-the-current-major-mode/18083#18083
** Print using a different theme
M-x customize-theme
select a theme with a light background
ps-print-buffer-with-faces
rollback theme change.

Must eventually write this into a function.
Source: https://emacs.stackexchange.com/questions/18407/ps-print-buffer-with-faces-with-color-themeed-dark-background
* Uniden BC75XLT
** Adding frequencies
To store frequencies in the first available channel:
1. Press Hold.
2. Enter the frequency and press Hold and Func + Pgm .
3. The scanner alternates between the frequency you are stopped on and the first available channel number with no frequency stored. Press E.
4. The scanner is now on that frequency, on Hold with the delay function automatically turned on (see page 47). Press Srch or Scan again to continue.
* git
** update submodules
from a tree with submodules
(i.e. https://github.com/percona/percona-server-mongodb), after
cloning:
#+BEGIN_SRC sh
git submodule init
git pull --recurse-submodules
git submodule update --recursive
#+END_SRC

Source: http://stackoverflow.com/questions/1030169/easy-way-pull-latest-of-all-submodules
** remove commits from server
The only valid use case of this, for me, was to remove images I
accidentally pushed to [[https://github.com/Percona-Lab/benchmark-results.git
][benchmark-results]]'s master branch, which should be empty except for
the README. Otherwise, this is dangerous, as it rewrites history.

What I did is:
#+BEGIN_SRC sh
git reset --hard HEAD~2  # ~2 because I had to go back 2 commits in this case
git push master HEAD --force
#+END_SRC

Source: http://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git
